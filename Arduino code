//pressure_bmp280
#include <Wire.h>
#include <SoftwareSerial.h>
#include <SPI.h>

#include <MS5611.h>

MS5611 baro;
int32_t pressure;

SoftwareSerial bluetoothSerial(3, 4); // RX, TX

const int MPU_addr = 0x68;
int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;

int minVal = 265; int maxVal = 402;

int x; int y; int z;
int amountLightsOn = 0;

//exponential filter for smoothing brightness
#include "MegunoLink.h"
#include "Filter.h"

// the <float> makes a filter for float numbers
// 20 is the weight (20 => 20%)
// 0 is the initial value of the filter
ExponentialFilter<int> FilteredPressure(20, 0);

// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// released under the GPLv3 license to match the rest of the AdaFruit NeoPixel library
#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif

#define PIN            10
#define NUMPIXELS      12
#define BRIGHTNESS     30

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

int pushButton = 8;

int timeCheck;
int timeInterval1 = 500;
int timeInterval2 = 1500;
int p0;

boolean calibrated = false;

void setup() {
  timeCheck = millis();
  // Start barometer
  baro = MS5611();
  baro.begin();
  // Start serial (UART)

  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);
  Serial.begin(9600);
  bluetoothSerial.begin(9600);

  //led
  pixels.setBrightness(BRIGHTNESS);
  pixels.begin(); // This initializes the NeoPixel library.
  pixels.show(); // Initialize all pixels to 'off'

  pinMode(pushButton, INPUT_PULLUP);

}

void loop() {
  int buttonState = digitalRead(pushButton);
  Serial.println(buttonState);

  if (buttonState == 0) { //-------------------------
    Serial.println(int(baro.getPressure()));
    timeCheck = millis();
    calibrated = false;
  }

  if (buttonState == 1) { //-------------------------

    if (!calibrated) {

      long pressureTotal = 0;
      for (int i = 0; i < 20; i++) {
        int p = int(baro.getPressure());
        pressureTotal = pressureTotal + p;
      }
      p0 = pressureTotal / 20;
      Serial.print("p0 = ");
      Serial.println(p0);
      calibrated = true;
    }
    //pressure control the num of lights---------------------
    int pa = int(baro.getPressure());
    
    int relativePressure = abs(p0 - pa);
    //------------test pressure to change the range
    int num = map(relativePressure, 0, 500, 0, 12);
    
      Serial.print("num = ");
      Serial.println(num);
      Serial.print("amountLightsOn = ");
      Serial.println(amountLightsOn);
    if (num < amountLightsOn) {
      for (int i = amountLightsOn; i > num; i--) {
        pixels.setPixelColor(i, 0);
        pixels.show();
        delay(40);
      }
    }

    if (num > amountLightsOn) {
      for (int j = amountLightsOn; j < num; j++) {
        pixels.setPixelColor(j, pixels.Color(250, 235, 215));
        //pixels.setPixelColor(j, pixels.Color(64, 255, 255, 160));
        pixels.show();
        delay(40);
      }
    }
    amountLightsOn = num;

    delay(500);
    //timeCheck = millis();

  }

  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr, 14, true);
  AcX = Wire.read() << 8 | Wire.read();
  AcY = Wire.read() << 8 | Wire.read();
  AcZ = Wire.read() << 8 | Wire.read();

  int xAng = map(AcX, minVal, maxVal, -90, 90);
  int yAng = map(AcY, minVal, maxVal, -90, 90);
  int zAng = map(AcZ, minVal, maxVal, -90, 90);

  int x = RAD_TO_DEG * (atan2(-yAng, -zAng) + PI);
  int y = RAD_TO_DEG * (atan2(-xAng, -zAng) + PI);
  int z = RAD_TO_DEG * (atan2(-yAng, -xAng) + PI);


  Serial.print("AngleX= ");
  Serial.println(x);
  Serial.print("AngleY= ");
  Serial.println(y);
  Serial.print("AngleZ= ");
  Serial.println(z);
  Serial.println("\n");

  bluetoothSerial.print(int(x));
  bluetoothSerial.print("\t");
  bluetoothSerial.print(int(y));
  bluetoothSerial.print("\t");
  bluetoothSerial.print(int(z));
  bluetoothSerial.print("\t");

  bluetoothSerial.println(int(baro.getPressure()));
  bluetoothSerial.print("\t");
  bluetoothSerial.println(int(p0));
  //export smoothed pressure readings to processing

  Serial.println();
}
